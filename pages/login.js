import Footer from "@/Components/Footer";
import NavBar from "@/Components/NavBar";
import {
  GoogleAuthProvider,
  getAuth,
  signInWithEmailAndPassword,
  signInWithPopup, // Add this import
} from "firebase/auth";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import app from "../firebaseConfig"; // Import the Firebase configuration

const EMAIL_EXPIRATION_TIME = 30 * 60 * 1000; // 30 minutes in milliseconds

// Function to set email in localStorage with expiration
const setEmailWithExpiry = (email) => {
  const now = new Date().getTime();
  const expiryTime = now + EMAIL_EXPIRATION_TIME;
  const emailData = {
    value: email,
    expiry: expiryTime,
  };
  localStorage.setItem("UserEmail", JSON.stringify(emailData));
};

// Function to get email from localStorage and check expiration
const getEmailFromStorage = () => {
  const emailData = localStorage.getItem("UserEmail");
  if (!emailData) {
    return null;
  }
  const { value, expiry } = JSON.parse(emailData);
  const now = new Date().getTime();

  if (now > expiry) {
    // Email has expired, remove it from storage
    localStorage.removeItem("UserEmail");
    return null;
  }

  return value;
};

export default function Login() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");

  const auth = getAuth(app); // Pass the Firebase app instance to getAuth
  const router = useRouter();

  // Email and password login function
  const signIn = () => {
    signInWithEmailAndPassword(auth, email, password)
      .then((response) => {
        sessionStorage.setItem("Token", response.user.accessToken);
        setEmailWithExpiry(response.user.email); // Save email with expiration
        router.push("/");
      })
      .catch((err) => {
        alert("Cannot Log in");
      });
  };

  // Google login function
  const signInWithGoogle = async () => {
    const provider = new GoogleAuthProvider();
    try {
      const result = await signInWithPopup(auth, provider);
      const user = result.user;

      sessionStorage.setItem("Token", user.accessToken);
      setEmailWithExpiry(user.email); // Save email with expiration

      try {
        const apiResponse = await fetch("/api/new-user-profile", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            email: user.email,
            userName: user.displayName,
          }),
        });
        if (apiResponse.ok) {
          router.push("/");
        } else {
          alert("API call failed test");
        }
      } catch (err) {
        console.error("Error fetching data:", err);
        alert("API call failed catch");
      }
      router.push("/");
    } catch (error) {
      console.error("Google Sign-In Error:", error.message);
    }
  };

  // Redirect if the user is already logged in
  useEffect(() => {
    let token = sessionStorage.getItem("Token");
    const storedEmail = getEmailFromStorage(); // Retrieve email from storage
    if (token && storedEmail) {
      router.push("/");
    }
  }, [router]);

  return (
    <div>
      <Head>
        <title>Ride Sharing AUTH</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <NavBar />

      <main
        className="bg-dark"
        style={{
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          minHeight: "100vh",
        }}
      >
        <div className="border p-5">
          <h1 className="text-3xl font-semibold mb-4 text-primary text-center">
            User Login
          </h1>
          <div>
            <input
              placeholder="Email"
              className="form-control mb-3"
              onChange={(event) => setEmail(event.target.value)}
              value={email}
              type="email"
            />
            <input
              placeholder="Password"
              className="form-control mb-3"
              onChange={(event) => setPassword(event.target.value)}
              value={password}
              type="password"
            />
          </div>

          <button className="btn btn-primary btn-block" onClick={signIn}>
            Sign In
          </button>
          <button
            className="btn btn-danger btn-block "
            onClick={signInWithGoogle}
          >
            Sign In with Google
          </button>
        </div>
      </main>
      <Footer />
    </div>
  );
}
